;----------------------------------------------;
;           Coder plugin syntax file           ;
;----------------------------------------------;

;Author: wisgest
;===============

;Colors
; Color need to be in #RRGGBB format.
; If color equal to zero, then color ignored.
;
;Font styles
; 0  ignored.
; 1  normal.
; 2  bold.
; 3  italic.
; 4  bold italic.
;
;For comfort file viewing/editing set tab size to 8.


Files:
;==========
;File types
;==========
*.js


;----------------------------------------------;
;                  HighLight                   ;
;----------------------------------------------;

;Flags (sum of the members)
;     1  case sensitive.
;     2  word is a composition of characters ("Words:" section only). Example: "0123456789" - highlight words that contain only digits.
;     4  quote end required ("Quotes:" section only).
;     8  quote start string is ignored and last meet delimiter used as quote start ("Quotes:" section only).
;    16  quote end string is ignored and first meet delimiter used as quote end ("Quotes:" section only).
;    32  don't highlight quote start ("Quotes:" section only).
;    64  don't highlight quote end ("Quotes:" section only).
;   128  don't catch and don't highlight quote start ("Quotes:" section only).
;   256  don't catch and don't highlight quote end ("Quotes:" section only).
;   512  quote start, delimiter or word located at line start.
;  1024  quote end, delimiter or word located at line end.
;  2048  quote start is surrounded with delimiters ("Quotes:" section only).
;  4096  quote end is surrounded with delimiters ("Quotes:" section only).
;  8192  quote doesn't contain delimiters ("Quotes:" section only).
; 16384  only quote start string is catched ("Quotes:" section only).
; 32768  quote doesn't contain any character ("Quotes:" section only).


Font:
;=================================================================
;FontStyle             FontSize              FaceName
;=================================================================
${HighLight_FontStyle} ${HighLight_FontSize} ${HighLight_FaceName}


Colors:
;=============================================================================================================================================================================================================================================================================================================================================================================================================================
;BasicTextColor             BasicBkColor              SelTextColor              SelBkColor              LineTextColor              LineBkColor              LineBorderColor              AltTextColor              AltBkColor              AltBorderColor              ColumnColor              MarkerColor              CaretColor              UrlColor              ActiveUrlColor              VisitUrlColor
;=============================================================================================================================================================================================================================================================================================================================================================================================================================
${HighLight_BasicTextColor} ${HighLight_BasicBkColor} ${HighLight_SelTextColor} ${HighLight_SelBkColor} ${HighLight_LineTextColor} ${HighLight_LineBkColor} ${HighLight_LineBorderColor} ${HighLight_AltTextColor} ${HighLight_AltBkColor} ${HighLight_AltBorderColor} ${HighLight_ColumnColor} ${HighLight_MarkerColor} ${HighLight_CaretColor} ${HighLight_UrlColor} ${HighLight_ActiveUrlColor} ${HighLight_VisitUrlColor}


BkImage:
;==================================================
;BkImageFile              BkImageAlpha
;==================================================
${HighLight_BkImageFile}  ${HighLight_BkImageAlpha}


AutoMark:
;====================================================================================================================
;AutoMarkFlags             AutoMarkFontStyle              AutoMarkTextColor              AutoMarkBkColor
;====================================================================================================================
${HighLight_AutoMarkFlags} ${HighLight_AutoMarkFontStyle} ${HighLight_AutoMarkTextColor} ${HighLight_AutoMarkBkColor}


Quotes:
;===================================================================================
;Flags  Font    Color   Color   Quote   Quote   Escape  Quote   Quote   Parent  Rule
;       style   text    bkgrnd  start   end     char    include exclude ID      ID
;===================================================================================
;5=1+4
5	0	${STR}	0	`"`	`"`	"\"	""	""	0	0
;5=1+4
5	0	${STR}	0	"'"	"'"	"\"	""	""	0	0
;1=1
1	0	${COMM}	0	"//"	""	":"	""	""	0	0
;5=1+4
5	0	${COMM}	0	"/*"	"*/"	""	""	""	0	0
;--RegExp--
;16517=1+4+128+16384
16517	0	0	0	"/"	"//"	"\"	""	"/"	0	0
;16517=1+4+128+16384
16517	0	0	0	"/"	"/*"	"\"	""	"/"	0	0
;16517=1+4+128+16384
16517	0	0	0	"/"	"{"	"\"	""	"/"	0	0
;5=1+4
5	0	${AREA}	0	"/"	"/"	"\"	""	""	0	0


QuotesRE:
;===========================================================================================
;Flags  Pattern         \BackRef=(FontStyle,ColorText,ColorBk) \BackRef=...  ParentID RuleID
;===========================================================================================


Delimiters:
;===============================================
;Flags  Font    Color   Color   Char(s)   Parent
;       style   text    bkgrnd            ID
;===============================================
1	0	0	0	" "
1	0	0	0	"	"
1	0	${DEL1}	0	(
1	0	${DEL1}	0	)
1	0	${DEL2}	0	{
1	0	${DEL2}	0	}
1	0	${DEL2}	0	.
1	0	${DEL2}	0	,
1	0	${DEL2}	0	:
1	0	${DEL2}	0	;
1	0	${DEL2}	0	!
1	0	${DEL2}	0	~
1	0	${DEL2}	0	|
1	0	${DEL2}	0	=
1	0	${DEL2}	0	-
1	0	${DEL2}	0	*
1	0	${DEL2}	0	+
1	0	${DEL2}	0	/
1	0	${DEL2}	0	<
1	0	${DEL2}	0	>
1	0	${DEL2}	0	&
1	0	${DEL2}	0	^
1	0	${DEL2}	0	%
1	0	${DEL2}	0	?
1	0	${DEL2}	0	[
1	0	${DEL2}	0	]


Words:
;===========================================
;Flags  Font    Color   Color   Word  Parent
;       style   text    bkgrnd        ID
;===========================================
;3=1+2
;3	0	${NUM}	0	"0123456789"
;--Keywords--
1	0	${OP}	0	super
1	0	${OP}	0	this
1	0	${OP}	0	yield
;--Operators--
1	0	${OP}	0	delete
1	0	${OP}	0	in
1	0	${OP}	0	instanceof
1	0	${OP}	0	new
1	0	${OP}	0	typeof
1	0	${OP}	0	void
;--Types and Values--
1	0	${TYPE}	0	true
1	0	${TYPE}	0	false
1	0	${TYPE}	0	null
1	0	${TYPE}	0	undefined
;--special values of Number Type--
1	0	${TYPE}	0	Infinity
1	0	${TYPE}	0	NaN
;--Declarations and the Variable Statement--
1	0	${OP}	0	const
1	0	${OP}	0	let
1	0	${OP}	0	var
 ;--Statements--
1	0	${IF}	0	break
1	0	${IF}	0	case
1	0	${IF}	0	catch
1	0	${IF}	0	continue
1	0	${IF}	0	debugger
1	0	${IF}	0	default
1	0	${IF}	0	do
1	0	${IF}	0	else
1	0	${IF}	0	finally
1	0	${IF}	0	for
1	0	${IF}	0	if
1	0	${IF}	0	in
1	0	${IF}	0	of
1	0	${IF}	0	return
1	0	${IF}	0	switch
1	0	${IF}	0	throw
1	0	${IF}	0	try
1	0	${IF}	0	while
1	0	${IF}	0	with
;--Functions and Classes--
1	0	${OP}	0	class
1	0	${OP}	0	constructor
1	0	${OP}	0	extends
1	0	${OP}	0	function
1	0	${OP}	0	get
1	0	${OP}	0	set
1	0	${OP}	0	static
;--Modules--
1	0	${OP}	0	as
1	0	${OP}	0	export
1	0	${OP}	0	from
1	0	${OP}	0	import
;--Value Properties of the Global Object--
1	0	0	0	Infinity
1	0	0	0	NaN
1	0	0	0	undefined
;--Function Properties of the Global Object--
1	0	${OP}	0	decodeURI
1	0	${OP}	0	decodeURIComponent
1	0	${OP}	0	encodeURI
1	0	${OP}	0	encodeURIComponent
1	0	${OP}	0	eval
1	0	${OP}	0	isFinite
1	0	${OP}	0	isNaN
1	0	${OP}	0	parseFloat
1	0	${OP}	0	parseInt
;--Extend with Microsoft's implementation--
1	0	${OP}	0	ScriptEngine
1	0	${OP}	0	ScriptEngineMajorVersion
1	0	${OP}	0	ScriptEngineMinorVersion
1	0	${OP}	0	ScriptEngineBuildVersion
;--Constructor Properties of the Global Object--
1	0	${OP}	0	Array
1	0	${OP}	0	ArrayBuffer
1	0	${OP}	0	Boolean
1	0	${OP}	0	DataView
1	0	${OP}	0	Date
1	0	${OP}	0	Error
1	0	${OP}	0	EvalError
1	0	${OP}	0	Float32Array
1	0	${OP}	0	Float64Array
1	0	${OP}	0	Function
1	0	${OP}	0	Int8Array
1	0	${OP}	0	Int16Array
1	0	${OP}	0	Int32Array
1	0	${OP}	0	Map
1	0	${OP}	0	Number
1	0	${OP}	0	Object
1	0	${OP}	0	Proxy
1	0	${OP}	0	Promise
1	0	${OP}	0	RangeError
1	0	${OP}	0	ReferenceError
1	0	${OP}	0	RegExp
1	0	${OP}	0	Set
1	0	${OP}	0	String
1	0	${OP}	0	Symbol
1	0	${OP}	0	SyntaxError
1	0	${OP}	0	TypeError
1	0	${OP}	0	Uint8Array
1	0	${OP}	0	Uint8ClampedArray
1	0	${OP}	0	Uint16Array
1	0	${OP}	0	Uint32Array
1	0	${OP}	0	URIError
1	0	${OP}	0	WeakMap
1	0	${OP}	0	WeakSet
;--Extend with Microsoft implementation--
1	0	${OP}	0	ActiveXObject
1	0	${OP}	0	Enumerator
1	0	${OP}	0	VBArray
;--Extend with AkelPad environment--
1	0	${OP}	0	_TCHAR
1	0	${OP}	0	_TSTR
1	0	${OP}	0	_TSIZE
1	0	${OP}	0	_X64
1	0	${OP}	0	_PtrAdd
1	0	${OP}	0	_PtrMath
;--Other Properties of the Global Object--
1	0	${OP}	0	JSON
1	0	${OP}	0	Math
1	0	${OP}	0	Reflect
;--Properties of the Object Constructor--
1	0	0	0	assign
1	0	0	0	create
1	0	0	0	defineProperties
1	0	0	0	defineProperty
1	0	0	0	freeze
1	0	0	0	getOwnPropertyDescriptor
1	0	0	0	getOwnPropertyNames
1	0	0	0	getOwnPropertySymbols
1	0	0	0	getPrototypeOf
1	0	0	0	is
1	0	0	0	isExtensible
1	0	0	0	isFrozen
1	0	0	0	isSealed
1	0	0	0	keys
1	0	0	0	preventExtensions
1	0	0	0	prototype
1	0	0	0	seal
1	0	0	0	setPrototypeOf
;--Properties of the Object Prototype Object--
1	0	0	0	constructor
1	0	0	0	hasOwnProperty
1	0	0	0	isPrototypeOf
1	0	0	0	propertyIsEnumerable
1	0	0	0	toLocaleString
1	0	0	0	toString
1	0	0	0	valueOf
;--Properties of the Function Constructor--
1	0	0	0	length
1	0	0	0	prototype
;--Properties of the Function Prototype Object--
1	0	0	0	apply
1	0	0	0	bind
1	0	0	0	call
1	0	0	0	constructor
1	0	0	0	toString
;--Properties of the Function Instances--
1	0	0	0	length
1	0	0	0	name
1	0	0	0	prototype
;--Properties of the Boolean Constructor--
1	0	0	0	prototype
;--Properties of the Boolean Prototype Object--
1	0	0	0	constructor
1	0	0	0	toString
1	0	0	0	valueOf
;--Properties of the Symbol Constructor--
1	0	0	0	for
1	0	0	0	hasInstance
1	0	0	0	isConcatSpreadable
1	0	0	0	iterator
1	0	0	0	keyFor
1	0	0	0	match
1	0	0	0	prototype
1	0	0	0	replace
1	0	0	0	search
1	0	0	0	species
1	0	0	0	split
1	0	0	0	toPrimitive
1	0	0	0	toStringTag
1	0	0	0	unscopables
;--Properties of the Symbol Prototype Object--
1	0	0	0	constructor
1	0	0	0	toString
1	0	0	0	valueOf
;--Properties of the Error Constructor--
1	0	0	0	prototype
;--Properties of the Error Prototype Object--
1	0	0	0	constructor
1	0	0	0	message
1	0	0	0	name
1	0	0	0	toString
;--Properties of the Number Constructor--
1	0	0	0	EPSILON
1	0	0	0	isFinite
1	0	0	0	isInteger
1	0	0	0	isNaN
1	0	0	0	isSafeInteger
1	0	0	0	MAX_SAFE_INTEGER
1	0	0	0	MAX_VALUE
1	0	0	0	MIN_SAFE_INTEGER
1	0	0	0	MIN_VALUE
1	0	0	0	NaN
1	0	0	0	NEGATIVE_INFINITY
1	0	0	0	parseFloat
1	0	0	0	parseInt
1	0	0	0	POSITIVE_INFINITY
1	0	0	0	prototype
;--Properties of the Number Prototype Object--
1	0	0	0	constructor
1	0	0	0	toExponential
1	0	0	0	toFixed
1	0	0	0	toLocaleString
1	0	0	0	toPrecision
1	0	0	0	toString
1	0	0	0	valueOf
;--Value Properties of the Math Object--
1	0	0	0	E
1	0	0	0	LN10
1	0	0	0	LN2
1	0	0	0	LOG10E
1	0	0	0	LOG2E
1	0	0	0	PI
1	0	0	0	SQRT1_2
1	0	0	0	SQRT2
;--Function Properties of the Math Object--
1	0	0	0	abs
1	0	0	0	acos
1	0	0	0	acosh
1	0	0	0	asin
1	0	0	0	asinh
1	0	0	0	atan
1	0	0	0	atanh
1	0	0	0	atan2
1	0	0	0	cbrt
1	0	0	0	ceil
1	0	0	0	clz32
1	0	0	0	cos
1	0	0	0	cosh
1	0	0	0	exp
1	0	0	0	expm1
1	0	0	0	floor
1	0	0	0	fround
1	0	0	0	hypot
1	0	0	0	imul
1	0	0	0	log
1	0	0	0	log1p
1	0	0	0	log10
1	0	0	0	log2
1	0	0	0	max
1	0	0	0	min
1	0	0	0	pow
1	0	0	0	random
1	0	0	0	round
1	0	0	0	sign
1	0	0	0	sin
1	0	0	0	sinh
1	0	0	0	sqrt
1	0	0	0	tan
1	0	0	0	tanh
1	0	0	0	trunc
;--Properties of the Date Constructor--
1	0	0	0	now
1	0	0	0	parse
1	0	0	0	prototype
1	0	0	0	UTC
;--Properties of the Date Prototype Object--
1	0	0	0	constructor
1	0	0	0	getDate
1	0	0	0	getDay
1	0	0	0	getFullYear
1	0	0	0	getHours
1	0	0	0	getMilliseconds
1	0	0	0	getMinutes
1	0	0	0	getMonth
1	0	0	0	getSeconds
1	0	0	0	getTime
1	0	0	0	getTimezoneOffset
1	0	0	0	getUTCDate
1	0	0	0	getUTCDay
1	0	0	0	getUTCFullYear
1	0	0	0	getUTCHours
1	0	0	0	getUTCMilliseconds
1	0	0	0	getUTCMinutes
1	0	0	0	getUTCMonth
1	0	0	0	getUTCSeconds
1	0	0	0	setDate
1	0	0	0	setFullYear
1	0	0	0	setHours
1	0	0	0	setMilliseconds
1	0	0	0	setMinutes
1	0	0	0	setMonth
1	0	0	0	setSeconds
1	0	0	0	setTime
1	0	0	0	setUTCDate
1	0	0	0	setUTCFullYear
1	0	0	0	setUTCHours
1	0	0	0	setUTCMilliseconds
1	0	0	0	setUTCMinutes
1	0	0	0	setUTCMonth
1	0	0	0	setUTCSeconds
1	0	0	0	toDateString
1	0	0	0	toISOString
1	0	0	0	toJSON
1	0	0	0	toLocaleDateString
1	0	0	0	toLocaleString
1	0	0	0	toLocaleTimeString
1	0	0	0	toString
1	0	0	0	toTimeString
1	0	0	0	toUTCString
1	0	0	0	valueOf
;--Properties of the String Constructor--
1	0	0	0	fromCharCode
1	0	0	0	fromCodePoint
1	0	0	0	prototype
1	0	0	0	raw
;--Properties of the String Prototype Object--
1	0	0	0	charAt
1	0	0	0	charCodeAt
1	0	0	0	codePointAt
1	0	0	0	concat
1	0	0	0	constructor
1	0	0	0	endsWith
1	0	0	0	includes
1	0	0	0	indexOf
1	0	0	0	lastIndexOf
1	0	0	0	localeCompare
1	0	0	0	match
1	0	0	0	normalize
1	0	0	0	repeat
1	0	0	0	replace
1	0	0	0	search
1	0	0	0	slice
1	0	0	0	split
1	0	0	0	startsWith
1	0	0	0	substring
1	0	0	0	toLocaleLowerCase
1	0	0	0	toLocaleUpperCase
1	0	0	0	toLowerCase
1	0	0	0	toString
1	0	0	0	toUpperCase
1	0	0	0	trim
1	0	0	0	valueOf
;--Properties of String Instances--
1	0	0	0	length
;--Properties of the RegExp Constructor--
1	0	0	0	prototype
;--Properties of the RegExp Prototype Object--
1	0	0	0	constructor
1	0	0	0	exec
1	0	0	0	flags
1	0	0	0	global
1	0	0	0	ignoreCase
1	0	0	0	multiline
1	0	0	0	source
1	0	0	0	sticky
1	0	0	0	test
1	0	0	0	toString
1	0	0	0	unicode
;--Properties of RegExp Instances--
1	0	0	0	lastIndex
;--Properties of the Array Constructor--
1	0	${OP}	0	from
1	0	0	0	isArray
1	0	0	0	of
1	0	0	0	prototype
;--Properties of the Array Prototype Object--
1	0	0	0	concat
1	0	0	0	constructor
1	0	0	0	copyWithin
1	0	0	0	entries
1	0	0	0	every
1	0	0	0	fill
1	0	0	0	filter
1	0	0	0	find
1	0	0	0	findIndex
1	0	0	0	forEach
1	0	0	0	indexOf
1	0	0	0	join
1	0	0	0	keys
1	0	0	0	lastIndexOf
1	0	0	0	map
1	0	0	0	pop
1	0	0	0	push
1	0	0	0	reduce
1	0	0	0	reduceRight
1	0	0	0	reverse
1	0	0	0	shift
1	0	0	0	slice
1	0	0	0	some
1	0	0	0	sort
1	0	0	0	splice
1	0	0	0	toLocaleString
1	0	0	0	toString
1	0	0	0	unshift
1	0	0	0	values
;--Properties of Array Instances--
1	0	0	0	length
;--Function Properties of the JSON Object--
1	0	0	0	parse
1	0	0	0	stringify
;--Properties of the Promise Constructor
1	0	0	0	all
1	0	0	0	prototype
1	0	0	0	race
1	0	0	0	reject
1	0	0	0	resolve
;--Properties of the Promise Prototype Object
1	0	0	0	catch
1	0	0	0	constructor
1	0	0	0	then
1	0	0	0	prototype
;--UI Events
;--methods
1	0	${OP}	0	addEventListener
1	0	${OP}	0	createEvent
1	0	${OP}	0	dispatchEvent
1	0	${OP}	0	handleEvent
1	0	${OP}	0	initCustomEvent
1	0	${OP}	0	initEvent
1	0	${OP}	0	preventDefault
1	0	${OP}	0	removeEventListener
1	0	${OP}	0	stopImmediatePropagation
1	0	${OP}	0	stopPropagation
;--DOM
;--methods
1	0	${OP}	0	appendChild
1	0	${OP}	0	hasChildNodes
1	0	${OP}	0	insertBefore
1	0	${OP}	0	isEqualNode
1	0	${OP}	0	removeChild
1	0	${OP}	0	replaceChild
1	0	${OP}	0	cloneNode





;----------------------------------------------;
;                   CodeFold                   ;
;----------------------------------------------;

;Flags (sum of the members)
;       1  case sensitive.
;       2  force get fold name for function list from left at the fold start ("Folds:" section only).
;       4  force get fold name for function list from right at the fold start, including fold start ("Folds:" section only).
;       8  fold start located at line start ("Folds:" section only).
;      16  fold start located at line end ("Folds:" section only).
;      32  fold end located at line start ("Folds:" section only).
;      64  fold end located at line end ("Folds:" section only).
;     128  don't catch fold end ("Folds:" section) or skip end ("Skips:" section).
;     256  additional to 128 flag - more priority is given to sibling level instead of parent level ("Folds:" section only).
;     512  comment fold - fold ignore any other folds and skips inside ("Folds:" section only).
;    1024  reserved.
;    2048  deny fold - founded fold will be ignored ("Folds:" section only).
;    4096  xml fold - "<tag" and "</tag>", "<single" and "/>", "<single" and ">" ("Folds:" section only).
;    8192  don't check delimiters from left of fold start ("Folds:" section only).
;   16384  don't check delimiters from right of fold start ("Folds:" section only).
;   32768  don't check delimiters from left of fold end ("Folds:" section only).
;   65536  don't check delimiters from right of fold end ("Folds:" section only).
;  131072  deny delimiters ("Folds:" section only).
;  262144  don't show fold in list ("Folds:" section only).
; 1048576  regular expression in fold start ("Folds:" section) or skip start ("Skips:" section).
; 2097152  regular expression in fold end ("Folds:" section) or skip end ("Skips:" section). Backreference \101 matches \1 in fold start, \102 matches \2 and so on.


FoldPanel:
;=================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;PanelFirstBkColor            PanelSecondBkColor             PanelNormalFoldColor             PanelActiveFoldColor             PanelNormalNodeOpenBkColor             PanelNormalNodeCloseBkColor             PanelActiveNodeOpenBkColor             PanelActiveNodeCloseBkColor             PanelNormalNodeOpenSignColor             PanelNormalNodeCloseSignColor             PanelActiveNodeOpenSignColor             PanelActiveNodeCloseSignColor
;=================================================================================================================================================================================================================================================================================================================================================================================================================================================================
${CodeFold_PanelFirstBkColor} ${CodeFold_PanelSecondBkColor} ${CodeFold_PanelNormalFoldColor} ${CodeFold_PanelActiveFoldColor} ${CodeFold_PanelNormalNodeOpenBkColor} ${CodeFold_PanelNormalNodeCloseBkColor} ${CodeFold_PanelActiveNodeOpenBkColor} ${CodeFold_PanelActiveNodeCloseBkColor} ${CodeFold_PanelNormalNodeOpenSignColor} ${CodeFold_PanelNormalNodeCloseSignColor} ${CodeFold_PanelActiveNodeOpenSignColor} ${CodeFold_PanelActiveNodeCloseSignColor}


FoldList:
;================================================
;ListTextColor            ListBkColor
;================================================
${CodeFold_ListTextColor} ${CodeFold_ListBkColor}


TagMark:
;============================================================================================================
;TagMarkFlags            TagMarkFontStyle             TagMarkTextColor             TagMarkBkColor
;============================================================================================================
${CodeFold_TagMarkFlags} ${CodeFold_TagMarkFontStyle} ${CodeFold_TagMarkTextColor} ${CodeFold_TagMarkBkColor}


Skips:
;=============================
;Flags  Skip    Skip    Escape
;       start   end     char
;=============================
1	`"`	`"`	"\"
1	`'`	`'`	"\"
1	"//"	"-->"	":"
;--RegExp--
;129=1+128
129	"/"	"//"	"\"
;129=1+128
129	"/"	"/*"	"\"
;129=1+128
129	"/"	"{"	"\"
1	"/"	"/"	"\"


Folds:
;===================================================================================
;Flags  Font    Color   Color   Fold      Fold      Deli        Parent  Rule    Rule
;       style   text    bkgrnd  start     end       miters      ID      ID      file
;===================================================================================
1	0	0	0	"{"       "}"       ""          0	0
;513=1+512
513	0	${COMM}	0	"/*"      "*/"      ""          0	0
;--switch...case...default--
;169=1+8+32+128
169	0	0	0	"case"    "case"    " 	"       0	0
;169=1+8+32+128
169	0	0	0	"case"    "default" " 	:"      0	0
;169=1+8+32+128
169	0	0	0	"default" "case"    " 	:"      0	0
;98441=1+8+128+32768+65536
98441	0	0	0	"case"    "}"       " 	:"      0	0
;98441=1+8+128+32768+65536
98441	0	0	0	"default" "}"       " 	:"      0	0


;----------------------------------------------;
;                 AutoComplete                 ;
;----------------------------------------------;

;Flags (sum of the members)
;  1  force case sensitive.
;  2  force case insensitive.
;  4  regular expression (only for "$="). Scan starts from caret line beginning and metacharacters \a or \z specified caret position.
;  8  Don't show in listbox.


CompleteList:
;=====================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;ListFontStyle                ListFontSize                 ListFaceName                 ListLineGap                 ListBlockIcon `"C:\1.dll", 0` ListBlockIconMargins "left;right"    ListHlBaseIcon `"C:\1.dll", 0` ListHlBaseIconMargins "left;right"    ListDocWordIcon `"C:\1.dll", 0` ListDocWordIconMargins "left;right"    ListBasicTextColor                 ListBasicBkColor                 ListSelTextColor                 ListSelBkColor
;=====================================================================================================================================================================================================================================================================================================================================================================================================================================================================
${AutoComplete_ListFontStyle} ${AutoComplete_ListFontSize} ${AutoComplete_ListFaceName} ${AutoComplete_ListLineGap} ${AutoComplete_ListBlockIcon} ${AutoComplete_ListBlockIconMargins} ${AutoComplete_ListHlBaseIcon} ${AutoComplete_ListHlBaseIconMargins} ${AutoComplete_ListDocWordIcon} ${AutoComplete_ListDocWordIconMargins} ${AutoComplete_ListBasicTextColor} ${AutoComplete_ListBasicBkColor} ${AutoComplete_ListSelTextColor} ${AutoComplete_ListSelBkColor}


Blocks:
;=============================================================================
;Abbreviations and blocks
;
; $~abbr         normal abbreviation.
; $(flags)~abbr  normal abbreviation with flags.
; $=abbr         exact abbreviation. May contain delimiters.
; $(flags)=abbr  exact abbreviation with flags. May contain delimiters.
; $[]            set caret to this position. Can be multiple (hot spots).
; $[text]        select text. Can be multiple (hot spots).
; $$             symbol $.
; $\]            escape symbol ]. Can be used in $[text] block: $[One [1$\] ].
; ${VAR}         variable assigned from Coder::Settings.
; $;             comment line.
;=============================================================================
$~do
do {
${AutoComplete_Indent}$[]
}
while ($[]);

$~for
for ($[]; $[]; $[]) {
${AutoComplete_Indent}$[]
}

$~if
if ($[]) {
${AutoComplete_Indent}$[]
}

$~switch
switch ($[])
{
${AutoComplete_Indent}case $[]:
${AutoComplete_Indent}${AutoComplete_Indent}$[]
${AutoComplete_Indent}${AutoComplete_Indent}break;
${AutoComplete_Indent}case $[]:
${AutoComplete_Indent}${AutoComplete_Indent}$[]
${AutoComplete_Indent}${AutoComplete_Indent}break;
${AutoComplete_Indent}default:
${AutoComplete_Indent}${AutoComplete_Indent}$[]
${AutoComplete_Indent}${AutoComplete_Indent}break;
}

$~try
try
{
${AutoComplete_Indent}$[]
}
catch ($[])
{
${AutoComplete_Indent}$[]
}

$~while
while ($[])
{
${AutoComplete_Indent}$[]
}

$~function
function $[name]() {
${AutoComplete_Indent}$[]
}

$; WScript object
$; --------------
$~Arguments $~WScript.Arguments
WScript.Arguments($[0])

$~ScriptBaseName $~WScript.ScriptBaseName
WScript.ScriptBaseName

$~ScriptFullName $~WScript.ScriptFullName
WScript.ScriptFullName

$~ScriptName $~WScript.ScriptName
WScript.ScriptName

$~FullName $~WScript.FullName
WScript.FullName

$~Name $~WScript.Name
WScript.Name

$~Path $~WScript.Path
WScript.Path

$~Echo $~WScript.Echo
WScript.Echo("$[]");

$~Sleep $~WScript.Sleep
WScript.Sleep($[100]);

$~Quit $~WScript.Quit
WScript.Quit();

$; AkelPad object
$; --------------
$~ActiveXObject $~AkelPad.Document
var AkelPad=new ActiveXObject("AkelPad.Document");

$~GetMainWnd $~AkelPad.GetMainWnd
var hMainWnd=AkelPad.GetMainWnd();

$~GetAkelDir $~AkelPad.GetAkelDir
AkelPad.GetAkelDir();

$~GetInstanceExe $~AkelPad.GetInstanceExe
AkelPad.GetInstanceExe();

$~GetInstanceDll $~AkelPad.GetInstanceDll
AkelPad.GetInstanceDll();

$~GetLangId $~AkelPad.GetLangId
AkelPad.GetLangId(1 /*LANGID_PRIMARY*/);

$~IsOldWindows $~AkelPad.IsOldWindows
AkelPad.IsOldWindows();

$~IsAkelEdit $~AkelPad.IsAkelEdit
AkelPad.IsAkelEdit();

$~IsMDI $~AkelPad.IsMDI
AkelPad.IsMDI();

$~GetEditWnd $~AkelPad.GetEditWnd
AkelPad.GetEditWnd();

$~SetEditWnd $~AkelPad.SetEditWnd
AkelPad.SetEditWnd($[hWnd])

$~GetEditDoc $~AkelPad.GetEditDoc
AkelPad.GetEditDoc();

$~GetEditFile $~AkelPad.GetEditFile
AkelPad.GetEditFile($[0]);

$~GetFilePath $~AkelPad.GetFilePath
AkelPad.GetFilePath($["C:\\File.txt"], $[2] /*$[CPF_FILENAME]*/);

$~GetEditCodePage $~AkelPad.GetEditCodePage
AkelPad.GetEditCodePage($[0]);

$~GetEditBOM $~AkelPad.GetEditBOM
AkelPad.GetEditBOM($[0]);

$~GetEditNewLine $~AkelPad.GetEditNewLine
AkelPad.GetEditNewLine($[0]);

$~GetEditModified $~AkelPad.GetEditModified
AkelPad.GetEditModified($[0]);

$~GetEditReadOnly $~AkelPad.GetEditReadOnly
AkelPad.GetEditReadOnly($[0]);

$~SetFrameInfo $~AkelPad.SetFrameInfo
AkelPad.SetFrameInfo($[0], $[1] /*$[FIS_TABSTOPSIZE]*/, $[4]);

$~SendMessage $~AkelPad.SendMessage
AkelPad.SendMessage($[hWndHandle], $[273] /*$[WM_COMMAND]*/, $[wParam], $[lParam]);

$~MessageBox $~AkelPad.MessageBox
AkelPad.MessageBox($[hWndParent], "$[Text]", WScript.ScriptName, $[0] /*$[MB_OK]*/);

$~InputBox $~AkelPad.InputBox
AkelPad.InputBox($[hWndParent], WScript.ScriptName, "$[Label]", "$[Edit]");

$~GetSelStart $~AkelPad.GetSelStart
AkelPad.GetSelStart();

$~GetSelEnd $~AkelPad.GetSelEnd
AkelPad.GetSelEnd();

$~SetSel $~AkelPad.SetSel
AkelPad.SetSel($[nSelStart], $[nSelEnd]);

$~GetSelText $~AkelPad.GetSelText
AkelPad.GetSelText();

$~GetTextRange $~AkelPad.GetTextRange
AkelPad.GetTextRange($[nRangeStart], $[nRangeEnd]);

$~ReplaceSel $~AkelPad.ReplaceSel
AkelPad.ReplaceSel("$[Text]");

$~TextFind $~AkelPad.TextFind
AkelPad.TextFind($[hEditWnd], "$[FindIt]", $[0x00000001|0x00200000] /*$[FRF_DOWN|FRF_BEGINNING]*/);

$~TextReplace $~AkelPad.TextReplace
AkelPad.TextReplace($[hEditWnd], "$[FindIt]", "$[ReplaceWith]", $[0x00000001|0x00200000] /*$[FRF_DOWN|FRF_BEGINNING]*/, $[bAll]);

$~GetClipboardText $~AkelPad.GetClipboardText
AkelPad.GetClipboardText();

$~SetClipboardText $~AkelPad.SetClipboardText
AkelPad.SetClipboardText("$[Text]");

$~IsPluginRunning $~AkelPad.IsPluginRunning
AkelPad.IsPluginRunning("$[Plugin::Function]");

$~CallPlugin $~AkelPad.Call
AkelPad.Call("$[Plugin::Function]");

$~CallExPlugin $~AkelPad.CallEx
AkelPad.CallEx($[0x14] /*$[DLLCF_SWITCHAUTOLOAD|DLLCF_SAVEONEXIT]*/, "$[Plugin::Function]");

$~Exec $~AkelPad.Exec
AkelPad.Exec("$[notepad.exe]");

$~Command $~AkelPad.Command
AkelPad.Command($[0]);

$~Font $~AkelPad.Font
AkelPad.Font("$[Courier New]", 0, 10);

$~Recode $~AkelPad.Recode
AkelPad.Recode($[1251], $[866]);

$~Include $~AkelPad.Include
AkelPad.Include("$[CommonFunctions.js]");

$~IsInclude $~AkelPad.IsInclude
AkelPad.IsInclude();

$~OpenFile $~AkelPad.OpenFile
AkelPad.OpenFile("$[C:\\File.txt]");

$~ReadFile $~AkelPad.ReadFile
AkelPad.ReadFile("$[C:\\File.txt]");

$~WriteFile $~AkelPad.WriteFile
AkelPad.WriteFile("$[C:\\File.txt]", $["Text"], $[-1], $[65001], $[true]);

$~SaveFile $~AkelPad.SaveFile
AkelPad.SaveFile($[hEditWnd], "$[C:\\File.txt]", $[nCodePage], $[bBOM]);

$~MemAlloc $~AkelPad.MemAlloc
AkelPad.MemAlloc($[nSize]);

$~MemCopy $~AkelPad.MemCopy
AkelPad.MemCopy($[lpPointer], $[vData], $[2] /*$[DT_QWORD]*/);

$~MemRead $~AkelPad.MemRead
AkelPad.MemRead($[lpPointer], $[2] /*$[DT_QWORD]*/);

$~MemStrPtr $~AkelPad.MemStrPtr
AkelPad.MemStrPtr($[pString]);

$~MemPtrStr $~AkelPad.MemPtrStr
AkelPad.MemPtrStr($[lpPointer]);

$~MemFree $~AkelPad.MemFree
AkelPad.MemFree($[lpPointer]);

$~DebugJIT $~AkelPad.DebugJIT
AkelPad.DebugJIT();

$~Debug $~AkelPad.Debug
AkelPad.Debug();

$~VarType $~AkelPad.VarType
AkelPad.VarType($[vData]);

$~VarDispatch $~AkelPad.VarDispatch
AkelPad.VarDispatch($[lpPointer]);

$~GetArgLine $~AkelPad.GetArgLine
AkelPad.GetArgLine($[]);

$~GetArgValue $~AkelPad.GetArgValue
AkelPad.GetArgValue("$[ArgName]", $[vDefault]);

$~WindowRegisterClass $~AkelPad.WindowRegisterClass
AkelPad.WindowRegisterClass("$[ClassName]");

$~WindowUnregisterClass $~AkelPad.WindowUnregisterClass
AkelPad.WindowUnregisterClass("$[ClassName]");

$~WindowRegisterDialog $~AkelPad.WindowRegisterDialog
AkelPad.WindowRegisterDialog("$[hWnd]");

$~WindowUnregisterDialog $~AkelPad.WindowUnregisterDialog
AkelPad.WindowUnregisterDialog("$[hWnd]");

$~WindowGetMessage $~AkelPad.WindowGetMessage
AkelPad.WindowGetMessage();

$~WindowSubClass $~AkelPad.WindowSubClass
AkelPad.WindowSubClass($[hHandle], $[CallbackProc], $[256 /*WM_KEYDOWN*/, 16 /*WM_CLOSE*/]);

$~WindowNextProc $~AkelPad.WindowNextProc
AkelPad.WindowNextProc($[hSubClass], $[hWnd], $[nMessage], $[wParam], $[lParam]);

$~WindowNoNextProc $~AkelPad.WindowNoNextProc
AkelPad.WindowNoNextProc($[hSubClass]);

$~WindowUnsubClass $~AkelPad.WindowUnsubClass
AkelPad.WindowUnsubClass($[hHandle]);

$~ThreadHook $~AkelPad.ThreadHook
AkelPad.ThreadHook($[nId], $[CallbackProc], $[nThreadId]);

$~ThreadUnhook $~AkelPad.ThreadUnhook
AkelPad.ThreadUnhook($[hHandle]);

$~ScriptNoMutex $~AkelPad.ScriptNoMutex
AkelPad.ScriptNoMutex();

$~ScriptExitCode $~AkelPad.ScriptExitCode
AkelPad.ScriptExitCode($[nCode]);

$~ScriptHandle $~AkelPad.ScriptHandle
AkelPad.ScriptHandle($[vData], $[nOperation]);

$~ConnectObject $~AkelPad.ConnectObject
AkelPad.ConnectObject($[oEventSource], "$[CON_]");

$~DisconnectObject $~AkelPad.DisconnectObject
AkelPad.DisconnectObject($[oEventSource]);

$; SystemFunction object
$; ---------------------
$~SystemFunction $~AkelPad.SystemFunction()
var oSys=AkelPad.SystemFunction();

$~AddParameter $~oSys.AddParameter
oSys.AddParameter($[vParameter]);

$~CallSystem $~oSys.Call
oSys.Call("$[user32::SetWindowText]" + _TCHAR, hMainWnd, "MyText");

$~GetLastError $~oSys.GetLastError
oSys.GetLastError();

$~RegisterCallback $~oSys.RegisterCallback
oSys.RegisterCallback($[CallbackProc]);

$~UnregisterCallback $~oSys.UnregisterCallback
oSys.UnregisterCallback($[lpCallback]);

$; ScriptSettings object
$; ---------------------
$~ScriptSettings $~AkelPad.ScriptSettings()
var oSet=AkelPad.ScriptSettings();

$~Begin $~oSet.Begin
oSet.Begin($[WScript.ScriptBaseName], $[0x1] /*$[POB_READ]*/);

$~Read $~oSet.Read
oSet.Read("$[pOptionName]", $[1] /*$[PO_DWORD]*/);

$~Write $~oSet.Write
oSet.Write("$[pOptionName]", $[1] /*$[PO_DWORD]*/, $[nValue]);

$~Delete $~oSet.Delete
oSet.Delete("$[pOptionName]");

$~End $~oSet.End
oSet.End();

$; Constants
$; ---------
$~_TCHAR
_TCHAR

$~_TSTR
_TSTR

$~_TSIZE
_TSIZE

$~_X64
_X64

$~DT_ANSI
0 /*DT_ANSI*/

$~DT_UNICODE
1 /*DT_UNICODE*/

$~DT_QWORD
2 /*DT_QWORD*/

$~DT_DWORD
3 /*DT_DWORD*/

$~DT_WORD
4 /*DT_WORD*/

$~DT_BYTE
5 /*DT_BYTE*/

$; Global
$; ------
$;$~_PtrAdd
$;_PtrAdd($[lpPointer], $[])

$~_PtrMath
_PtrMath($[lpPointer1], $["!="], $[lpPointer2])
