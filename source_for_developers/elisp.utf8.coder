;----------------------------------------------;
;           Coder plugin syntax file           ;
;----------------------------------------------;

; Highlight Elisp (Emacs Lisp) files.
; https://github.com/cuprum/AkelPad_coders/blob/master/elisp.coder

;Colors
; Color need to be in #RRGGBB format.
; If color equal to zero, then color ignored.
;
;Font styles
; 0  ignored.
; 1  normal.
; 2  bold.
; 3  italic.
; 4  bold italic.
;
;For comfort file viewing/editing set tab size to 8.


Files:
;==========
;File types
;==========
*.el


;----------------------------------------------;
;                  HighLight                   ;
;----------------------------------------------;

;Flags (sum of the members)
;     1  case sensitive.
;     2  word is a composition of characters ("Words:" section only). Example: "0123456789" - highlight words that contain only digits.
;     4  quote end required ("Quotes:" section only).
;     8  quote start string is ignored and last meet delimiter used as quote start ("Quotes:" section only).
;    16  quote end string is ignored and first meet delimiter used as quote end ("Quotes:" section only).
;    32  don't highlight quote start ("Quotes:" section only).
;    64  don't highlight quote end ("Quotes:" section only).
;   128  don't catch and don't highlight quote start ("Quotes:" section only).
;   256  don't catch and don't highlight quote end ("Quotes:" section only).
;   512  quote start, delimiter or word located at line start.
;  1024  quote end, delimiter or word located at line end.
;  2048  quote start is surrounded with delimiters ("Quotes:" section only).
;  4096  quote end is surrounded with delimiters ("Quotes:" section only).
;  8192  quote doesn't contain delimiters ("Quotes:" section only).
; 16384  only quote start string is catched ("Quotes:" section only).
; 32768  quote doesn't contain any character ("Quotes:" section only).


Font:
;=================================================================
;FontStyle             FontSize              FaceName
;=================================================================
${HighLight_FontStyle} ${HighLight_FontSize} ${HighLight_FaceName}


Colors:
;=============================================================================================================================================================================================================================================================================================================================================================================================================================
;BasicTextColor             BasicBkColor              SelTextColor              SelBkColor              LineTextColor              LineBkColor              LineBorderColor              AltTextColor              AltBkColor              AltBorderColor              ColumnColor              MarkerColor              CaretColor              UrlColor              ActiveUrlColor              VisitUrlColor
;=============================================================================================================================================================================================================================================================================================================================================================================================================================
${HighLight_BasicTextColor} ${HighLight_BasicBkColor} ${HighLight_SelTextColor} ${HighLight_SelBkColor} ${HighLight_LineTextColor} ${HighLight_LineBkColor} ${HighLight_LineBorderColor} ${HighLight_AltTextColor} ${HighLight_AltBkColor} ${HighLight_AltBorderColor} ${HighLight_ColumnColor} ${HighLight_MarkerColor} ${HighLight_CaretColor} ${HighLight_UrlColor} ${HighLight_ActiveUrlColor} ${HighLight_VisitUrlColor}


BkImage:
;==================================================
;BkImageFile              BkImageAlpha
;==================================================
${HighLight_BkImageFile}  ${HighLight_BkImageAlpha}


AutoMark:
;====================================================================================================================
;AutoMarkFlags             AutoMarkFontStyle              AutoMarkTextColor              AutoMarkBkColor
;====================================================================================================================
${HighLight_AutoMarkFlags} ${HighLight_AutoMarkFontStyle} ${HighLight_AutoMarkTextColor} ${HighLight_AutoMarkBkColor}


Quotes:
;======================================================================================
;Flags  Pattern  "\BackRef=(FontStyle,ColorText,ColorBk) \BackRef=..."  ParentID RuleID
;======================================================================================
;===================================================================================
;Flags  Font    Color   Color   Quote   Quote   Escape  Quote   Quote   Parent  Rule
;       style   text    bkgrnd  start   end     char    include exclude ID      ID  
;===================================================================================
;5=1+4
5	0	${STR}	0	`"`	`"`	"\"	""	""	0	0
1	3	${COMM}	0	";"	""	""	""	""	0	1


QuotesRE:
;================================================================================================================
;Flags  Pattern                              \BackRef=(FontStyle,ColorText,ColorBk) \BackRef=...  ParentID RuleID
;================================================================================================================
0	`\B(:[\w\-/]+)\b`  "\1=(0,${ATTR},0)"             0        0
0	`(?<=^;);;###(autoload)`  "\1=(3,${TYPE},0)"      1        0


Delimiters:
;===============================================
;Flags  Font    Color   Color   Char(s)   Parent
;       style   text    bkgrnd            ID
;===============================================
1	0	0	0	" "
1	0	0	0	"	"
1	0	0	0	`"`
1	0	0	0	`'`
1	0	0	0	(
1	0	0	0	)


Words:
;=================================================
;Flags  Font    Color   Color   Word        Parent
;       style   text    bkgrnd              ID
;=================================================
1	0	${IF}	0	condition-case
1	0	${IF}	0	declare-function
1	0	${IF}	0	defcustom
1	0	${IF}	0	defgroup
1	0	${IF}	0	defmacro
1	0	${IF}	0	eq
1	0	${IF}	0	equal
1	0	${IF}	0	interactive
1	0	${IF}	0	provide
1	0	${IF}	0	require
; Variables
1	0	${IF}	0	add-variable-watcher
1	0	${IF}	0	boundp
1	0	${IF}	0	buffer-local-boundp
1	0	${IF}	0	buffer-local-value
1	0	${IF}	0	buffer-local-variables
1	0	${IF}	0	connection-local-set-profile-variables
1	0	${IF}	0	connection-local-set-profiles
1	0	${IF}	0	default-boundp
1	0	${IF}	0	default-toplevel-value
1	0	${IF}	0	default-value
1	0	${IF}	0	defconst
1	0	${IF}	0	define-obsolete-variable-alias
1	0	${IF}	0	defvar
1	0	${IF}	0	defvar-local
1	0	${IF}	0	defvaralias
1	0	${IF}	0	dir-locals-set-class-variables
1	0	${IF}	0	dir-locals-set-directory-class
1	0	${IF}	0	dlet
1	0	${IF}	0	get-variable-watchers
1	0	${IF}	0	gv-define-expander
1	0	${IF}	0	gv-define-setter
1	0	${IF}	0	gv-define-simple-setter
1	0	${IF}	0	gv-letplace
1	0	${IF}	0	hack-connection-local-variables
1	0	${IF}	0	hack-connection-local-variables-apply
1	0	${IF}	0	hack-dir-local-variables
1	0	${IF}	0	hack-dir-local-variables-non-file-buffer
1	0	${IF}	0	hack-local-variables
1	0	${IF}	0	indirect-variable
1	0	${IF}	0	keywordp
1	0	${IF}	0	kill-all-local-variables
1	0	${IF}	0	kill-local-variable
1	0	${IF}	0	let
1	0	${IF}	0	let*
1	0	${IF}	0	letrec
1	0	${IF}	0	local-variable-if-set-p
1	0	${IF}	0	local-variable-p
1	0	${IF}	0	make-local-variable
1	0	${IF}	0	make-obsolete-variable
1	0	${IF}	0	make-variable-buffer-local
1	0	${IF}	0	makunbound
1	0	${IF}	0	named-let
1	0	${IF}	0	remove-variable-watcher
1	0	${IF}	0	risky-local-variable-p
1	0	${IF}	0	safe-local-variable-p
1	0	${IF}	0	set
1	0	${IF}	0	set-default
1	0	${IF}	0	set-default-toplevel-value
1	0	${IF}	0	setf
1	0	${IF}	0	setq
1	0	${IF}	0	setq-default
1	0	${IF}	0	setq-local
1	0	${IF}	0	special-variable-p
1	0	${IF}	0	symbol-value
1	0	${IF}	0	with-connection-local-variables
; Functions
1	0	${IF}	0	always
1	0	${IF}	0	apply
1	0	${IF}	0	apply-partially
1	0	${IF}	0	cl-call-next-method
1	0	${IF}	0	cl-defgeneric
1	0	${IF}	0	cl-defmethod
1	0	${IF}	0	cl-defun
1	0	${IF}	0	cl-next-method-p
1	0	${IF}	0	defalias
1	0	${IF}	0	defun
1	0	${IF}	0	fboundp
1	0	${IF}	0	fmakunbound
1	0	${IF}	0	fset
1	0	${IF}	0	funcall
1	0	${IF}	0	function
1	0	${IF}	0	identity
1	0	${IF}	0	ignore
1	0	${IF}	0	lambda
1	0	${IF}	0	mapc
1	0	${IF}	0	mapcan
1	0	${IF}	0	mapcar
1	0	${IF}	0	mapconcat
1	0	${IF}	0	symbol-function
; Lists
1	0	${IF}	0	add-to-list
1	0	${IF}	0	add-to-ordered-list
1	0	${IF}	0	alist-get
1	0	${IF}	0	append
1	0	${IF}	0	assoc
1	0	${IF}	0	assoc-default
1	0	${IF}	0	assoc-delete-all
1	0	${IF}	0	assq
1	0	${IF}	0	assq-delete-all
1	0	${IF}	0	atom
1	0	${IF}	0	butlast
1	0	${IF}	0	caar
1	0	${IF}	0	cadr
1	0	${IF}	0	car
1	0	${IF}	0	car-safe
1	0	${IF}	0	cdar
1	0	${IF}	0	cddr
1	0	${IF}	0	cdr
1	0	${IF}	0	cdr-safe
1	0	${IF}	0	cons
1	0	${IF}	0	consp
1	0	${IF}	0	copy-alist
1	0	${IF}	0	copy-tree
1	0	${IF}	0	delete
1	0	${IF}	0	delete-dups
1	0	${IF}	0	delq
1	0	${IF}	0	ensure-list
1	0	${IF}	0	flatten-tree
1	0	${IF}	0	last
1	0	${IF}	0	lax-plist-get
1	0	${IF}	0	lax-plist-put
1	0	${IF}	0	let-alist
1	0	${IF}	0	list
1	0	${IF}	0	listp
1	0	${IF}	0	make-list
1	0	${IF}	0	member
1	0	${IF}	0	member-ignore-case
1	0	${IF}	0	memq
1	0	${IF}	0	memql
1	0	${IF}	0	nbutlast
1	0	${IF}	0	nconc
1	0	${IF}	0	nlistp
1	0	${IF}	0	nth
1	0	${IF}	0	nthcdr
1	0	${IF}	0	null
1	0	${IF}	0	number-sequence
1	0	${IF}	0	plist-get
1	0	${IF}	0	plist-member
1	0	${IF}	0	plist-put
1	0	${IF}	0	pop
1	0	${IF}	0	proper-list-p
1	0	${IF}	0	push
1	0	${IF}	0	rassoc
1	0	${IF}	0	rassq
1	0	${IF}	0	rassq-delete-all
1	0	${IF}	0	remove
1	0	${IF}	0	remq
1	0	${IF}	0	safe-length
1	0	${IF}	0	setcar
1	0	${IF}	0	setcdr
; Symbols
1	0	${IF}	0	function-get
1	0	${IF}	0	function-put
1	0	${IF}	0	gensym
1	0	${IF}	0	get
1	0	${IF}	0	intern
1	0	${IF}	0	intern-soft
1	0	${IF}	0	make-symbol
1	0	${IF}	0	mapatoms
1	0	${IF}	0	put
1	0	${IF}	0	setplist
1	0	${IF}	0	symbol-name
1	0	${IF}	0	symbol-plist
1	0	${IF}	0	symbolp
1	0	${IF}	0	unintern
; Numbers
1	0	${IF}	0	%
1	0	${IF}	0	*
1	0	${IF}	0	+
1	0	${IF}	0	-
1	0	${IF}	0	/
1	0	${IF}	0	/=
1	0	${IF}	0	1+
1	0	${IF}	0	1-
1	0	${IF}	0	<
1	0	${IF}	0	<=
1	0	${IF}	0	=
1	0	${IF}	0	>
1	0	${IF}	0	>=
1	0	${IF}	0	abs
1	0	${IF}	0	acos
1	0	${IF}	0	ash
1	0	${IF}	0	asin
1	0	${IF}	0	atan
1	0	${IF}	0	bignump
1	0	${IF}	0	ceiling
1	0	${IF}	0	copysign
1	0	${IF}	0	cos
1	0	${IF}	0	eql
1	0	${IF}	0	exp
1	0	${IF}	0	expt
1	0	${IF}	0	fceiling
1	0	${IF}	0	ffloor
1	0	${IF}	0	fixnump
1	0	${IF}	0	float
1	0	${IF}	0	floatp
1	0	${IF}	0	floor
1	0	${IF}	0	frexp
1	0	${IF}	0	fround
1	0	${IF}	0	ftruncate
1	0	${IF}	0	integerp
1	0	${IF}	0	isnan
1	0	${IF}	0	ldexp
1	0	${IF}	0	log
1	0	${IF}	0	logand
1	0	${IF}	0	logb
1	0	${IF}	0	logcount
1	0	${IF}	0	logior
1	0	${IF}	0	lognot
1	0	${IF}	0	logxor
1	0	${IF}	0	lsh
1	0	${IF}	0	max
1	0	${IF}	0	min
1	0	${IF}	0	mod
1	0	${IF}	0	natnump
1	0	${IF}	0	numberp
1	0	${IF}	0	random
1	0	${IF}	0	round
1	0	${IF}	0	sin
1	0	${IF}	0	sqrt
1	0	${IF}	0	tan
1	0	${IF}	0	truncate
1	0	${IF}	0	zerop
; Strings, Chars
1	0	${IF}	0	assoc-string
1	0	${IF}	0	capitalize
1	0	${IF}	0	char-equal
1	0	${IF}	0	char-or-string-p
1	0	${IF}	0	char-to-string
1	0	${IF}	0	clear-string
1	0	${IF}	0	compare-strings
1	0	${IF}	0	concat
1	0	${IF}	0	downcase
1	0	${IF}	0	format
1	0	${IF}	0	format-message
1	0	${IF}	0	format-spec
1	0	${IF}	0	make-string
1	0	${IF}	0	number-to-string
1	0	${IF}	0	split-string
1	0	${IF}	0	store-substring
1	0	${IF}	0	string
1	0	${IF}	0	string-chop-newline
1	0	${IF}	0	string-clean-whitespace
1	0	${IF}	0	string-collate-equalp
1	0	${IF}	0	string-collate-lessp
1	0	${IF}	0	string-distance
1	0	${IF}	0	string-equal
1	0	${IF}	0	string-fill
1	0	${IF}	0	string-greaterp
1	0	${IF}	0	string-lessp
1	0	${IF}	0	string-limit
1	0	${IF}	0	string-lines
1	0	${IF}	0	string-or-null-p
1	0	${IF}	0	string-pad
1	0	${IF}	0	string-prefix-p
1	0	${IF}	0	string-search
1	0	${IF}	0	string-suffix-p
1	0	${IF}	0	string-to-char
1	0	${IF}	0	string-to-number
1	0	${IF}	0	string-trim
1	0	${IF}	0	string-trim-left
1	0	${IF}	0	string-trim-right
1	0	${IF}	0	string-version-lessp
1	0	${IF}	0	string<
1	0	${IF}	0	string=
1	0	${IF}	0	stringp
1	0	${IF}	0	substring
1	0	${IF}	0	substring-no-properties
1	0	${IF}	0	upcase
1	0	${IF}	0	upcase-initials
; Sequences
1	0	${IF}	0	copy-sequence
1	0	${IF}	0	elt
1	0	${IF}	0	length
1	0	${IF}	0	length<
1	0	${IF}	0	length=
1	0	${IF}	0	length>
1	0	${IF}	0	nreverse
1	0	${IF}	0	reverse
1	0	${IF}	0	seq-concatenate
1	0	${IF}	0	seq-contains-p
1	0	${IF}	0	seq-count
1	0	${IF}	0	seq-difference
1	0	${IF}	0	seq-do
1	0	${IF}	0	seq-doseq
1	0	${IF}	0	seq-drop
1	0	${IF}	0	seq-drop-while
1	0	${IF}	0	seq-elt
1	0	${IF}	0	seq-empty-p
1	0	${IF}	0	seq-every-p
1	0	${IF}	0	seq-filter
1	0	${IF}	0	seq-find
1	0	${IF}	0	seq-group-by
1	0	${IF}	0	seq-intersection
1	0	${IF}	0	seq-into
1	0	${IF}	0	seq-length
1	0	${IF}	0	seq-let
1	0	${IF}	0	seq-map
1	0	${IF}	0	seq-map-indexed
1	0	${IF}	0	seq-mapcat
1	0	${IF}	0	seq-mapn
1	0	${IF}	0	seq-max
1	0	${IF}	0	seq-min
1	0	${IF}	0	seq-partition
1	0	${IF}	0	seq-position
1	0	${IF}	0	seq-random-elt
1	0	${IF}	0	seq-reduce
1	0	${IF}	0	seq-remove
1	0	${IF}	0	seq-set-equal-p
1	0	${IF}	0	seq-setq
1	0	${IF}	0	seq-some
1	0	${IF}	0	seq-sort
1	0	${IF}	0	seq-sort-by
1	0	${IF}	0	seq-subseq
1	0	${IF}	0	seq-take
1	0	${IF}	0	seq-take-while
1	0	${IF}	0	seq-union
1	0	${IF}	0	seq-uniq
1	0	${IF}	0	seqp
1	0	${IF}	0	sequencep
1	0	${IF}	0	sort
; Arrays
1	0	${IF}	0	aref
1	0	${IF}	0	arrayp
1	0	${IF}	0	aset
1	0	${IF}	0	fillarray
; Char-Tables
1	0	${IF}	0	char-table-extra-slot
1	0	${IF}	0	char-table-p
1	0	${IF}	0	char-table-parent
1	0	${IF}	0	char-table-range
1	0	${IF}	0	char-table-subtype
1	0	${IF}	0	make-char-table
1	0	${IF}	0	map-char-table
1	0	${IF}	0	set-char-table-extra-slot
1	0	${IF}	0	set-char-table-parent
1	0	${IF}	0	set-char-table-range
; Vectors, Bool-vectors
1	0	${IF}	0	bool-vector
1	0	${IF}	0	bool-vector-count-consecutive
1	0	${IF}	0	bool-vector-count-population
1	0	${IF}	0	bool-vector-exclusive-or
1	0	${IF}	0	bool-vector-intersection
1	0	${IF}	0	bool-vector-not
1	0	${IF}	0	bool-vector-p
1	0	${IF}	0	bool-vector-set-difference
1	0	${IF}	0	bool-vector-subsetp
1	0	${IF}	0	bool-vector-union
1	0	${IF}	0	make-bool-vector
1	0	${IF}	0	make-vector
1	0	${IF}	0	vconcat
1	0	${IF}	0	vector
1	0	${IF}	0	vectorp
; Loops
1	0	${IF}	0	dolist
1	0	${IF}	0	dotimes
1	0	${IF}	0	while
; Control Structures
1	0	${IF}	0	catch
1	0	${IF}	0	define-error
1	0	${IF}	0	error
1	0	${IF}	0	iter-close
1	0	${IF}	0	iter-defun
1	0	${IF}	0	iter-do
1	0	${IF}	0	iter-lambda
1	0	${IF}	0	iter-next
1	0	${IF}	0	iter-yield
1	0	${IF}	0	iter-yield-from
1	0	${IF}	0	pcase
1	0	${IF}	0	pcase-defmacro
1	0	${IF}	0	pcase-dolist
1	0	${IF}	0	pcase-let
1	0	${IF}	0	pcase-let*
1	0	${IF}	0	pcase-setq
1	0	${IF}	0	prog1
1	0	${IF}	0	prog2
1	0	${IF}	0	progn
1	0	${IF}	0	signal
1	0	${IF}	0	throw
1	0	${IF}	0	user-error
; Conditionals
1	0	${OP}	0	and
1	0	${OP}	0	cond
1	0	${OP}	0	if
1	0	${OP}	0	not
1	0	${OP}	0	or
1	0	${OP}	0	unless
1	0	${OP}	0	when
1	0	${OP}	0	xor
; Boolen
1	0	${NUM}	0	t
1	0	${NUM}	0	nil


;----------------------------------------------;
;                   CodeFold                   ;
;----------------------------------------------;

;Flags (sum of the members)
;       1  case sensitive.
;       2  force get fold name for function list from left at the fold start ("Folds:" section only).
;       4  force get fold name for function list from right at the fold start, including fold start ("Folds:" section only).
;       8  fold start ("Folds:" section) or skip start ("Skips:" section) located at line start.
;      16  fold start ("Folds:" section) or skip start ("Skips:" section) located at line end.
;      32  fold end ("Folds:" section) or skip end ("Skips:" section) located at line start.
;      64  fold end ("Folds:" section) or skip end ("Skips:" section) located at line end.
;     128  don't catch fold end ("Folds:" section) or skip end ("Skips:" section).
;     256  additional to 128 flag - more priority is given to sibling level instead of parent level ("Folds:" section only).
;     512  comment fold - fold ignore any other folds and skips inside ("Folds:" section only).
;    1024  reserved.
;    2048  deny fold - founded fold will be ignored ("Folds:" section only).
;    4096  xml fold - "<tag" and "</tag>", "<single" and "/>", "<single" and ">" ("Folds:" section only).
;    8192  don't check delimiters from left of fold start ("Folds:" section only).
;   16384  don't check delimiters from right of fold start ("Folds:" section only).
;   32768  don't check delimiters from left of fold end ("Folds:" section only).
;   65536  don't check delimiters from right of fold end ("Folds:" section only).
;  131072  deny delimiters ("Folds:" section only).
;  262144  don't show fold in list ("Folds:" section only).
; 1048576  regular expression in fold start ("Folds:" section) or skip start ("Skips:" section).
; 2097152  regular expression in fold end ("Folds:" section) or skip end ("Skips:" section).


FoldPanel:
;=================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;PanelFirstBkColor            PanelSecondBkColor             PanelNormalFoldColor             PanelActiveFoldColor             PanelNormalNodeOpenBkColor             PanelNormalNodeCloseBkColor             PanelActiveNodeOpenBkColor             PanelActiveNodeCloseBkColor             PanelNormalNodeOpenSignColor             PanelNormalNodeCloseSignColor             PanelActiveNodeOpenSignColor             PanelActiveNodeCloseSignColor
;=================================================================================================================================================================================================================================================================================================================================================================================================================================================================
${CodeFold_PanelFirstBkColor} ${CodeFold_PanelSecondBkColor} ${CodeFold_PanelNormalFoldColor} ${CodeFold_PanelActiveFoldColor} ${CodeFold_PanelNormalNodeOpenBkColor} ${CodeFold_PanelNormalNodeCloseBkColor} ${CodeFold_PanelActiveNodeOpenBkColor} ${CodeFold_PanelActiveNodeCloseBkColor} ${CodeFold_PanelNormalNodeOpenSignColor} ${CodeFold_PanelNormalNodeCloseSignColor} ${CodeFold_PanelActiveNodeOpenSignColor} ${CodeFold_PanelActiveNodeCloseSignColor}


FoldList:
;================================================
;ListTextColor            ListBkColor
;================================================
${CodeFold_ListTextColor} ${CodeFold_ListBkColor}


TagMark:
;============================================================================================================
;TagMarkFlags            TagMarkFontStyle             TagMarkTextColor             TagMarkBkColor
;============================================================================================================
${CodeFold_TagMarkFlags} ${CodeFold_TagMarkFontStyle} ${CodeFold_TagMarkTextColor} ${CodeFold_TagMarkBkColor}


Skips:
;=============================
;Flags  Skip    Skip    Escape
;       start   end     char
;=============================
1	";"	""	""


Folds:
;====================================================================================
;Flags  Font    Color   Color   Fold      Fold      Delimiters   Parent  Rule    Rule
;       style   text    bkgrnd  start     end                    ID      ID      file
;====================================================================================
;3408385=1+512+262144+1048576+2097152
3408385  0      ${STR}  0     `(?<![^\\]\\)"`	`(?<![^\\]\\)"`	``	0	0
1       0      0       0     `(`	`)`	""

;----------------------------------------------;
;                 AutoComplete                 ;
;----------------------------------------------;

;Flags (sum of the members)
;  1  force case sensitive.
;  2  force case insensitive.
;  4  regular expression (only for "$="). Scan starts from caret line beginning and metacharacters \a or \z specified caret position.
;  8  Don't show in listbox.


CompleteList:
;=====================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;ListFontStyle                ListFontSize                 ListFaceName                 ListLineGap                 ListBlockIcon `"C:\1.dll", 0` ListBlockIconMargins "left;right"    ListHlBaseIcon `"C:\1.dll", 0` ListHlBaseIconMargins "left;right"    ListDocWordIcon `"C:\1.dll", 0` ListDocWordIconMargins "left;right"    ListBasicTextColor                 ListBasicBkColor                 ListSelTextColor                 ListSelBkColor
;=====================================================================================================================================================================================================================================================================================================================================================================================================================================================================
${AutoComplete_ListFontStyle} ${AutoComplete_ListFontSize} ${AutoComplete_ListFaceName} ${AutoComplete_ListLineGap} ${AutoComplete_ListBlockIcon} ${AutoComplete_ListBlockIconMargins} ${AutoComplete_ListHlBaseIcon} ${AutoComplete_ListHlBaseIconMargins} ${AutoComplete_ListDocWordIcon} ${AutoComplete_ListDocWordIconMargins} ${AutoComplete_ListBasicTextColor} ${AutoComplete_ListBasicBkColor} ${AutoComplete_ListSelTextColor} ${AutoComplete_ListSelBkColor}


Blocks:
;=============================================================================
;Abbreviations and blocks
;
; $~abbr         normal abbreviation.
; $(flags)~abbr  normal abbreviation with flags.
; $=abbr         exact abbreviation. May contain delimiters.
; $(flags)=abbr  exact abbreviation with flags. May contain delimiters.
; $[]            set caret to this position. Can be multiple (hot spots).
; $[text]        select text. Can be multiple (hot spots).
; $$             symbol $.
; $\]            escape symbol ]. Can be used in $[text] block: $[One [1$\] ].
; ${VAR}         variable assigned from Coder::Settings.
; $;             comment line.
;=============================================================================

